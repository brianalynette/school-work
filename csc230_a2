.text


main:	

# Student Name: Briana Johnson
# Student Number: V00929120


# STUDENTS MAY MODIFY CODE BELOW
# vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

	## Test code that calls procedure for part A
	 jal save_our_souls

	## morse_flash test for part B
	#addi $a0, $zero, 0x42   # dot dot dash dot
	#jal morse_flash
	
	## morse_flash test for part B
	# addi $a0, $zero, 0x37   # dash dash dash
	 #jal morse_flash
		
	## morse_flash test for part B
	 #addi $a0, $zero, 0x32  	# dot dash dot
	# jal morse_flash
			
	## morse_flash test for part B
	#addi $a0, $zero, 0x11   # dash
	#jal morse_flash	
	
	# flash_message test for part C
	# la $a0, test_buffer
	# jal flash_message
	
	# letter_to_code test for part D
	# the letter 'P' is properly encoded as 0x46.
	#addi $a0, $zero, 'P'
	#jal letter_to_code
	
	# letter_to_code test for part D
	# the letter 'A' is properly encoded as 0x21
	# addi $a0, $zero, 'A'
	# jal letter_to_code
	
	# letter_to_code test for part D
	# the space' is properly encoded as 0xff
	#addi $a0, $zero, ' '
	# jal letter_to_code
	
	# encode_message test for part E
	# The outcome of the procedure is here
	# immediately used by flash_message
	#la $a0, message01
	#la $a1, buffer01
	#jal encode_message
	#la $a0, buffer01
	#jal flash_message
	
	
	# Proper exit from the program.
	addi $v0, $zero, 10
	syscall

	
	
###########
# PROCEDURE
save_our_souls:
	addi $sp, $sp, -4
	sw $ra, 0($sp)

	jal seven_segment_on	# S
	jal delay_short		
	jal seven_segment_off
	jal delay_long		
	jal seven_segment_on	# S
	jal delay_short		
	jal seven_segment_off
	jal delay_long	
	jal seven_segment_on	# S
	jal delay_short		
	jal seven_segment_off
	jal delay_long

	jal seven_segment_on	# O
	jal delay_long
	jal seven_segment_off
	jal delay_long
	jal seven_segment_on	# O
	jal delay_long
	jal seven_segment_off
	jal delay_long
	jal seven_segment_on	# O
	jal delay_long
	jal seven_segment_off
	jal delay_long
	
	jal seven_segment_on	# S
	jal delay_short		
	jal seven_segment_off
	jal delay_long		
	jal seven_segment_on	# S
	jal delay_short		
	jal seven_segment_off
	jal delay_long	
	jal seven_segment_on	# S
	jal delay_short		
	jal seven_segment_off
	
	lw $ra, 0($sp)
	jr $ra


# PROCEDURE

# $t2: current bit
# $t3: length of sequence
# $t4: copy of sequence to cycle through
# $t5: most number of bits to cycle for half a byte

morse_flash:
	addi $sp, $sp, -4
	sw $ra, 0($sp)

	beq $a0, 0xff, spaces
	and $t3, $a0, 0xf0	
	srl $t3, $t3, 4		
	and $t4, $a0, 0x0f	
	li $t5, 4		
	bne $t3, $t5, length_not_four
	j dot_dash
	
length_not_four:
	sub $t5, $t5, $t3
	sllv $t4, $t4, $t5
	
dot_dash:
	beq $t3, $zero, done_morse	# if the number of bits to cycle thru has been reached
	and $t2, $t4, 8		# $t2: $t4 and 0b1000
	beq $t2, $zero, dot	# if current bit == zero, dot
	beq $t2, 8, dash	# if current bit == 1, dot
	j dot_dash	
	
dot:
	jal seven_segment_on
	jal delay_short
	jal seven_segment_off
	jal delay_long	
	sll $t4, $t4, 1
	add $t3, $t3, -1
	j dot_dash
	
dash:
	jal seven_segment_on
	jal delay_long
	jal seven_segment_off
	jal delay_long	
	sll $t4, $t4, 1
	add $t3, $t3, -1
	j dot_dash
	
spaces:
	jal seven_segment_off
	jal delay_long	
	jal delay_long
	jal delay_long	

done_morse:
	li $t2, 0
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra
	

###########
# PROCEDURE

# $a0: data-memory address/current byte
# $t7: copy of $a0/pointer

flash_message:
	addi $sp, $sp, -4
	sw $ra, 0($sp) 
	or $t7, $0, $a0		# copy of $a0
	
info_flash:
	lbu $a0, 0($t7) 
	beq $a0, $zero, done_flash
	add $t7, $t7, 1		# move pointer to next byte
	jal morse_flash
	j info_flash

done_flash:
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra
	
	
###########
# PROCEDURE

# $a0: data-memory address (T)
# $t5: byte stored at $t6
# $t6: memory address of codes
# $t8: length
# $t9: pattern

letter_to_code:
	addi $sp, $sp, -4
	sw $ra, 0($sp) 
	la $t6, codes	
	li $t9, 0

info_letter:
	lbu $t5, 0($t6)	
	beq $a0, 0x20, space_ascii
	beq $t5, $zero, done_letter
	bne $a0, $t5, next_letter
	
found_letter:
	add $t6, $t6, 1
	lbu $t5, 0($t6)	
	beq $t5, $zero, done_letter
	add $t8, $t8, 1
	beq $t5, '.', dot_l
	beq $t5, '-', dash_l
	j found_letter
	
dot_l:
	sll $t9, $t9, 1
	j found_letter
	
dash_l:
	sll $t9, $t9, 1
	or $t9, $t9, 1
	j found_letter
	
space_ascii:
	or $t9, $t9, 0xff
	j done_letter
		
next_letter: 
	add $t6, $t6, 8
	j info_letter
	
done_letter:
	sll $t8, $t8, 4
	or $t9, $t8, $t9
	and $v0 , $v0, $zero
	or $v0, $v0, $t9
	li $t5, 0
	li $t6, 0
	li $t8, 0
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra	


###########
# PROCEDURE

# $a0: address of message/first byte
# $a1: address of buffer
# $t1: copy of message
# $t2: copy of buffer initial address

encode_message:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	or $t1, $t1, $a0
	or $t2, $t2, $a1
	
info_encode:
	lbu $a0, 0($t1)
	beq $a0, $zero, done_encode
	jal letter_to_code
	sb $v0, 0($a1)
	add $a1, $a1, 1
	add $t1, $t1, 1
	j info_encode

done_encode:
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra

# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# STUDENTS MAY MODIFY CODE ABOVE

#############################################
# DO NOT MODIFY ANY OF THE CODE / LINES BELOW

###########
# PROCEDURE
seven_segment_on:
	la $t1, 0xffff0010     # location of bits for right digit
	addi $t2, $zero, 0xff  # All bits in byte are set, turning on all segments
	sb $t2, 0($t1)         # "Make it so!"
	jr $31


###########
# PROCEDURE
seven_segment_off:
	la $t1, 0xffff0010	# location of bits for right digit
	sb $zero, 0($t1)	# All bits in byte are unset, turning off all segments
	jr $31			# "Make it so!"
	

###########
# PROCEDURE
delay_long:
	add $sp, $sp, -4	# Reserve 
	sw $a0, 0($sp)
	addi $a0, $zero, 600
	addi $v0, $zero, 32
	syscall
	lw $a0, 0($sp)
	add $sp, $sp, 4
	jr $31

	
###########
# PROCEDURE			
delay_short:
	add $sp, $sp, -4
	sw $a0, 0($sp)
	addi $a0, $zero, 200
	addi $v0, $zero, 32
	syscall
	lw $a0, 0($sp)
	add $sp, $sp, 4
	jr $31




#############
# DATA MEMORY
.data
codes:
	.byte 'A', '.', '-', 0, 0, 0, 0, 0
	.byte 'B', '-', '.', '.', '.', 0, 0, 0
	.byte 'C', '-', '.', '-', '.', 0, 0, 0
	.byte 'D', '-', '.', '.', 0, 0, 0, 0
	.byte 'E', '.', 0, 0, 0, 0, 0, 0
	.byte 'F', '.', '.', '-', '.', 0, 0, 0
	.byte 'G', '-', '-', '.', 0, 0, 0, 0
	.byte 'H', '.', '.', '.', '.', 0, 0, 0
	.byte 'I', '.', '.', 0, 0, 0, 0, 0
	.byte 'J', '.', '-', '-', '-', 0, 0, 0
	.byte 'K', '-', '.', '-', 0, 0, 0, 0
	.byte 'L', '.', '-', '.', '.', 0, 0, 0
	.byte 'M', '-', '-', 0, 0, 0, 0, 0
	.byte 'N', '-', '.', 0, 0, 0, 0, 0
	.byte 'O', '-', '-', '-', 0, 0, 0, 0
	.byte 'P', '.', '-', '-', '.', 0, 0, 0
	.byte 'Q', '-', '-', '.', '-', 0, 0, 0
	.byte 'R', '.', '-', '.', 0, 0, 0, 0
	.byte 'S', '.', '.', '.', 0, 0, 0, 0
	.byte 'T', '-', 0, 0, 0, 0, 0, 0
	.byte 'U', '.', '.', '-', 0, 0, 0, 0
	.byte 'V', '.', '.', '.', '-', 0, 0, 0
	.byte 'W', '.', '-', '-', 0, 0, 0, 0
	.byte 'X', '-', '.', '.', '-', 0, 0, 0
	.byte 'Y', '-', '.', '-', '-', 0, 0, 0
	.byte 'Z', '-', '-', '.', '.', 0, 0, 0
	
message01:	.asciiz "A A A"
message02:	.asciiz "SOS"
message03:	.asciiz "WATERLOO"
message04:	.asciiz "DANCING QUEEN"
message05:	.asciiz "CHIQUITITA"
message06:	.asciiz "THE WINNER TAKES IT ALL"
message07:	.asciiz "MAMMA MIA"
message08:	.asciiz "TAKE A CHANCE ON ME"
message09:	.asciiz "KNOWING ME KNOWING YOU"
message10:	.asciiz "FERNANDO"

buffer01:	.space 128
buffer02:	.space 128
test_buffer:	.byte 0x30 0x37 0x30 0x00    # This is SOS
